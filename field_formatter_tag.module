<?php

/**
 * @file
 * Provides custom HTML class settings for field formatters.
 */

use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\Xss;
use Drupal\Core\Entity\Entity\EntityViewDisplay;

/**
 * Implements hook_field_formatter_settings_summary_alter().
 */
function field_formatter_tag_field_formatter_settings_summary_alter(&$summary, $context) {

  foreach (['tag' => 'Tag', 'tag_class' => 'Tag Class'] as $param => $label) {
    $setting = $context['formatter']->getThirdPartySetting('field_formatter_tag', $param);

    if (!empty($setting)) {
      $summary[] = t('@label: @param', [
        '@label' => $label,
        '@param' => Xss::filter($setting, []),
      ]);
    }
  }

}

/**
 * Implements hook_field_formatter_third_party_settings_form().
 *
 * Adds a 'class' textfield to all formatters.
 */
function field_formatter_tag_field_formatter_third_party_settings_form(\Drupal\Core\Field\FormatterInterface $plugin, \Drupal\Core\Field\FieldDefinitionInterface $field_definition, $view_mode, $form, \Drupal\Core\Form\FormStateInterface $form_state) {

  $element['tag'] = [
    '#type' => 'select',
    '#options' => array_combine(Xss::getAdminTagList(), Xss::getAdminTagList()),
    '#title' => t('Field Formatter Tag'),
    '#default_value' => $plugin->getThirdPartySetting('field_formatter_tag', 'tag'),
  ];
  $element['tag_class'] = [
    '#type' => 'textfield',
    '#title' => t('Field Formatter Tag Class'),
    '#default_value' => $plugin->getThirdPartySetting('field_formatter_tag', 'tag_class', 'tag-class-wrapper'),
  ];
  return $element;
}

/**
 * Implements hook_preprocess_HOOK() for field templates.
 *
 * Adds a custom class to the field's class attribute
 * according to the field formatter settings.
 */
function field_formatter_tag_preprocess_field(&$variables) {

  // Get a few convenient handles.
  $entity = $variables['element']['#object'];
  $field_name = $variables['element']['#field_name'];
  $view_mode = $variables['element']['#view_mode'];

  // Drill down to field formatter settings.
  $render_display = EntityViewDisplay::collectRenderDisplay($entity, $view_mode);
  $field_display = $render_display->getComponent($field_name);

  // Add class for whole field.
  if (isset($field_display['third_party_settings']['field_formatter_tag'])) {
    foreach (\Drupal\Core\Render\Element::children($variables['items']) as $child) {
      $variables['items'][$child]['content']['#theme_wrappers']['container_tag'] = [
        '#tag' => Html::escape($field_display['third_party_settings']['field_formatter_tag']['tag']),
        '#attributes' => [
          'class' => Html::escape(isset($field_display['third_party_settings']['field_formatter_tag']['tag_class']) ? $field_display['third_party_settings']['field_formatter_tag']['tag_class'] : 'tag-class-wrapper'),
        ],
      ];
    }
  }
}

/**
 * Implements hook_theme().
 *
 * Register a module (or theme's) theme implementations.
 *
 */
function field_formatter_tag_theme() {
  return [
    'container_tag' => [
      'render element' => 'element',
    ],
  ];
}

/**
 * Prepares variables for container_tag templates.
 *
 * Default template: container-tag.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: An associative array containing the properties of the element.
 *     Properties used: #id, #attributes, #children.
 */
function template_preprocess_container_tag(&$variables) {
  $variables['has_parent'] = FALSE;
  $element = $variables['element'];
  $variables['tag'] = !empty($element['#tag']) ? $element['#tag'] : 'div';
  // Ensure #attributes is set.
  $element += ['#attributes' => []];

  // Special handling for form elements.
  if (isset($element['#array_parents'])) {
    // Assign an html ID.
    if (!isset($element['#attributes']['id'])) {
      $element['#attributes']['id'] = $element['#id'];
    }
    $variables['has_parent'] = TRUE;
  }

  $variables['children'] = $element['#children'];
  $variables['attributes'] = $element['#attributes'];
}
